/*
// Given an n-ary tree, return the level order traversal of its nodes' values. 
// (ie, from left to right, level by level).

// For example, given a 3-ary tree: 

         1
      /  |  \
     3   2   4
    / \
   5   6
      
// We should return its level order traversal:
[
     [1],
     [3,2,4],
     [5,6]
]
*/

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> result = new ArrayList<>();
        
        if(root == null) {
            return result;
        }
        
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
        
        while(!q.isEmpty()) {
            int size = q.size();
            List<Integer> list = new ArrayList<>();
            
            for(int i = 0; i < size; i++) {
                Node node = q.poll();
                list.add(node.val);
                for(Node child : node.children) {
                    q.offer(child);
                }
            }
            result.add(list);
        }
        return result;
    }
}
