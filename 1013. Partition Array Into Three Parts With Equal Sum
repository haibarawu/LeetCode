/******************************
1013. Partition Array Into Three Parts With Equal Sum

Given an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.
Formally, we can partition the array if we can find indexes i+1 < j with
(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])

Example 1:
Input: [0,2,1,-6,6,-7,9,1,2,0,1]
Output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1

Example 2:
Input: [0,2,1,-6,6,7,9,-1,2,0,1]
Output: false

Example 3:
Input: [3,3,6,5,-2,2,5,1,-9,4]
Output: true
Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4

Note:
1. 3 <= A.length <= 50000
2. -10000 <= A[i] <= 10000
    
******************************/

/******************************
1、先遍历一遍，求出数组和，检查总和是否能被3整除;
2、循环遍历数组A，计算和的一部分partitionSum;如果找到和 sum/3 相等，则将partitionSum重置为0，并增加计数器count;
3、到最后，如果平均可以看到至少3次，返回true;否则返回false。
时间复杂度：O(n)
空间复杂度：O(1)
******************************/


class Solution {
    public boolean canThreePartsEqualSum(int[] A) {
        int sum = 0;
        
        for (int num : A) {
            sum += num;
        }
        
        if (sum % 3 != 0) {
            return false;
        }
        
        int count = 0;
        int partitionSum = 0;
        
        for (int i = 0; i < A.length; i ++) {
            partitionSum += A[i];
            
            if (partitionSum == sum / 3) {
                partitionSum = 0;
                count ++;
            }
            
            if (count >= 3) {
                return true; 
            }
        }
        
        return false;
    }
}
