/****************************************************************************************************
1282. Group the People Given the Group Size They Belong To

Difficulty: Medium

https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/

There are n people whose IDs go from 0 to n - 1 and each person belongs exactly to one group. 
Given the array groupSizes of length n telling the group size each person belongs to, 
return the groups there are and the people's IDs each group includes.
You can return any solution in any order and the same applies for IDs. 
Also, it is guaranteed that there exists at least one solution. 

有 n 位用户参加活动，他们的 ID 从 0 到 n - 1，每位用户都恰好属于某一用户组。
给你一个长度为 n 的数组 groupSizes，其中包含每位用户所处的用户组的大小，
请你返回用户分组情况（存在的用户组以及每个组中用户的 ID）。
你可以任何顺序返回解决方案，ID 的顺序也不受限制。
此外，题目给出的数据保证至少存在一种解决方案。

Example 1:
Input: groupSizes = [3,3,3,3,3,1,3]
Output: [[5],[0,1,2],[3,4,6]]
Explanation: 
Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].

Example 2:
Input: groupSizes = [2,1,3,3,3,2]
Output: [[1],[0,5],[2,3,4]]

Constraints:
groupSizes.length == n
1 <= n <= 500
1 <= groupSizes[i] <= n

****************************************************************************************************/


--Method1:
class Solution {
    public List<List<Integer>> groupThePeople(int[] groupSizes) {
        List<List<Integer>> result = new ArrayList<>(); 
        // 分组用Map<Key, Vlaue>
        Map<Integer, List<Integer>> map = new HashMap<>(); 
        
        // 循环所有用户
        for(int i = 0; i < groupSizes.length; i++) { 
            //当前的key为当前用户小组人数
            int key = groupSizes[i];
            //result中的单个小组
            List<Integer> list = new ArrayList<>();
            
            // 如果该用户所在组人数已经存在，则放入list中，没有则跳过
            if(map.containsKey(key)) {
                list = map.get(key);
            }
            // 将当前用户存入该组
            list.add(i);
            
            // 如果当前组人已满
            if(list.size() == key) {
                // 将当前组存入返回结果
                result.add(list); 
                // 从map中删除该组（map的key不可以重复存在，将key删除以重新使用）
                map.remove(key); 
            }
            else {
                // 如果当前组人没有满，更新map中该组成员列表
                map.put(key, list);
            }
        }
        
        return result;
    }
}


/****************************************************************************************************/


--Method2:
class Solution {
    public List<List<Integer>> groupThePeople(int[] groupSizes) {
        List<List<Integer>> result = new ArrayList<>(); 
        
        Map<Integer, List<Integer>> map = new HashMap<>(); // 分组用Map<Key, Vlaue>
        
        for(int i = 0; i < groupSizes.length; i++) { // 循环所有用户
            // 利用当前用户所在组的人数，得到该组成员列表，没有就新建一个
            List<Integer> list = map.getOrDefault(groupSizes[i], new ArrayList<>());
            // 将当前用户存入该组
            list.add(i);
            
            // 如果当前组人已满
            if(list.size() == groupSizes[i]) {
                result.add(list); // 将当前组存入返回结果
                map.remove(groupSizes[i]); // 从map中删除该组
            }
            else {
                // 如果当前组人没有满，更新map中该组成员列表
                map.put(groupSizes[i], list);
            }
        }
        
        return result;
    }
}


