/*
// Given a binary tree, find the length of the longest path where each node in the path has the same value. 
// This path may or may not pass through the root.

// Note: The length of path between two nodes is represented by the number of edges between them.

Example 1:
Input:

              5
             / \
            4   5
           / \   \
          1   1   5
Output:
2

Example 2:
Input:

              1
             / \
            4   5
           / \   \
          4   4   5
Output:
2
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
class Solution {
    int result;
    
    public int longestUnivaluePath(TreeNode root) {
        result = 0;
        arrowLength(root);
        return result;
    }
    
    public int arrowLength(TreeNode node) {
        if (node == null) {
            return 0;
        }
        
        int left = arrowLength(node.left);
        int right = arrowLength(node.right);
        
        int arrowLeft = 0, arrowRight = 0;
        
        if (node.left != null && node.left.val == node.val) {
            arrowLeft += left + 1;
        }
        
        if (node.right != null && node.right.val == node.val) {
            arrowRight += right + 1;
        }
        
        result = Math.max(result, arrowLeft + arrowRight);
        
        return Math.max(arrowLeft, arrowRight);
    }
}
