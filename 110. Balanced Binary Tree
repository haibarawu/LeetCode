/****
Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as a binary tree, 
in which the depth of the two subtrees of every node never differ by more than 1.
****/

//Java solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int depth(TreeNode node){
        if(node == null){
            return 0;
        }
        else if(node.left == null && node.right == null){
            return 1;
        }
        else{
            int left = depth(node.left);
            int right = depth(node.right);
            return Math.max(left, right) + 1;
        }
    }
    
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }
        int left = depth(root.left);
        int right = depth(root.right);
        
        if(Math.abs(left - right) > 1){
            return false;
        }
        return isBalanced(root.left) && isBalanced(root.right);
    }
}
