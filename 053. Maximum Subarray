/**
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.
**/

//Java solution:

public class Solution {
    public int maxSubArray(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        
        int sum;
        int max;
        int result = Integer.MIN_VALUE;
        
        for(int i = 0; i < nums.length; i++){
            sum = 0;
            max = Integer.MIN_VALUE;
            
            for(int j = i; j < nums.length; j++){
                sum = sum + nums[j];
                max = Math.max(sum, max);
            }
            result = Math.max(result, max);
            //sum = 0;
            //max = Integer.MIN_VALUE;
        }
        
        return result;
    }
}


/*
public class Solution {
    public int maxSubArray(int[] A) {
        if (A == null || A.length == 0){
            return 0;
        }
        
        int max = Integer.MIN_VALUE;
        int sum = 0;
        
        for (int i = 0; i < A.length; i++) {
            sum += A[i];
            max = Math.max(max, sum);
            sum = Math.max(sum, 0);
        }

        return max;
    }
}
*/

